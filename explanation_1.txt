# Explanation:
# From the desciption I lenarned that I probably need a data structure to hold both the items 
# and how many times it has been visited. So I think of using two dictionaries, one for the items, 
# the other for its number of visits. But then I need to sort the second dict every time I access
# the items, since its number of visits has changed. So when think of sorting, I instantly come up with the idea
# of bubble sort, which makes the bigger/smaller one at front. If I use this method, I won't have to sort every
# time I visit, just put it at front. So the most suitable structure for this may not be a dict, but a queue.
# I lift one to head when its been visited, and remove the tail when it's above the capacity, which costs O(1). 
# However, I still need O(n) to find the item because it's a linked list. If I use array to store, I will need 
# only O(1) to find the item, but O(n) to put it at head. The time complexity for get() is O(n), for
# set() is O(1). And the space complexity for get() is O(n), for set() is O(1).
